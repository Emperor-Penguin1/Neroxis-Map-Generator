import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

group 'net.neroxis'
version 'SNAPSHOT'

sourceCompatibility = 1.14

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }

    test {
        java {
            srcDirs = ['src/test']
        }
    }
}


repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    implementation("com.github.FAForever:faf-java-commons:0b83fa48a039cea085a7d462cc937fb5a035c186") {
        exclude module: 'guava'
        exclude module: 'faf-commons-api'
    }
    implementation("org.luaj:luaj-jse:3.0.1")
    implementation("com.google.guava:guava:28.0-jre")
    compileOnly('org.projectlombok:lombok:1.18.14')
    annotationProcessor('org.projectlombok:lombok:1.18.14')
    implementation('com.google.code.gson:gson:2.8.5')

    testCompile('junit:junit:4.11')
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'generator.MapGenerator'
    }
}

task populatorJar(type: ShadowJar) {
    archiveBaseName = 'MapPopulator'
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'populator.MapPopulator'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}

task evaluatorJar(type: ShadowJar) {
    archiveBaseName = 'MapEvaluator'
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'evaluator.MapEvaluator'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}

task transformerJar(type: ShadowJar) {
    archiveBaseName = 'MapTransformer'
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'transformer.MapTransformer'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}